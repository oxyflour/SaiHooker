<!DOCTYPE html>
<html>
<head>
	<!-- HTA tag does not work in IE11 -->
	<meta http-equiv="X-UA-Compatible" content="IE=IE9" />
	<meta charset="utf-8" />
	<title>SaiHooker</title>
	<style>
		body {
			margin: 0;
			padding: 0;
		}
		a {
			color: #555;
			text-decoration: none;
		}
		a:hover {
			color: #999;
			text-decoration: underline;
		}
		input[type=file] {
			width: 0;
			height: 0;
			position: absolute;
			font-size: 150%;
		}
		.hidden {
			display: none;
		}
		.check-button input {
			position: absolute;
			width: 0;
			opacity: 0;
		}
		.check-button label {
			display: block;
			margin: 2px;
			padding: 5px;
		}
		.check-button input:checked + label {
			background: #ccc;
		}
	</style>
	<HTA:Application
		id="Sai_Hooker_33895"
		applicationname="Sai Hooker"
		icon="sai.ico"
		innerborder="no"
		scroll="yes"
		selection="no"
		maximizebutton="no"
		contextmenu="no"
		sysmenu="yes"
		singleinstance="yes" />
</head>
<body>
	<object id="hooker" width="0" height="0" classid="clsid:8E1D1128-0685-4C1D-8475-916B2BDE241A"></object>
	<object id="wndutil" width="0" height="0" classid="clsid:4661BF20-A332-4ADA-9F20-1D6EAB5DADA3"></object>
	<div class="show-image hidden">
		<input id="img_file" type="file" />
		<a style="position:absolute;background-color:#eee;margin:3px" href="#" onclick="loadImage()">[ close ]</a>
		<img id="img" unselectable="on" onclick="toggleImageSize(this)" />
	</div>
	<div class="hide-image" style="margin:10px">
		<div class="show-error">
			<h3>Hook to SAI failed <small>(<span class="err"></span>)</small></h3>
			<span>
				<input id="sai_file" type="file" />
				<a href="#" onclick="browseFile('#sai_file') && runFile('#sai_file');return false;">[ Browse ]</a>
			</span>
		</div>
		<form class="hide-error">
			<h4>
				<small><a href="#" onclick="$('#log').toggle();return false">[ see log ]</a></small>
				<small><a href="#" onclick="browseFile('#img_file') && loadImage('#img_file');return false">[ load image ]</a></small>
			</h4>
			<p class="check-button">
				<input class="auto-load" type="checkbox"
					initvalue="hooker.GetSaiStatus('lock-touch')"
					onclick="hooker.SetSaiStatus('lock-touch', this.checked ? '1' : '')" />
				<label for="prev-input">Disable Touch</label>
			</p>
			<p class="check-button">
				<input type="checkbox" onclick="simulateKey(VK.SHIFT, this.checked)" />
				<label for="prev-input">Shift</label>
			</p>
			<p class="check-button">
				<input type="checkbox" onclick="simulateKey(VK.CTRL, this.checked)" />
				<label for="prev-input">Ctrl</label>
			</p>
			<p class="check-button">
				<input type="checkbox" onclick="simulateKey(VK.ALT, this.checked)" />
				<label for="prev-input">Alt</label>
			</p>
		</form>
		<div id="log" style="display:none"></div>
	</div>
	<script src="jquery-1.8.0.min.js"></script>
	<script id="popup" type="text/xml" for="menu">
		<menu>
			<menu text="Mix" gst="ud">
				<item text="Redu (&amp;R)" key="^y" />
				<item text="Clear (&amp;D)" key="d" />
				<item text="Flip (&amp;H)" key="h" />
				<item text="Fill (C-F)" key="^f" />
			</menu>
			<menu text="Select" gst="U">
				<item text="Select None (C-D/u)" gst="u" key="^d" />
				<item text="Select All (C-A)" key="^a" />
				<sep />
				<item text="Select Rect (&amp;Q*)" key="q" />
				<item text="Select Free (&amp;U*)" key="u" />
				<sep />
				<item text="Select Pen (&amp;A)" key="a" />
				<item text="Select Eraser (&amp;S)" key="s" />
			</menu>
			<menu text="UI, File" gst="R">
				<item text="TAB (Tab)" key="{TAB}" />
				<item text="Fullscreen (F11)" key="{F11}" />
				<item text="NextView (C-Tab)" key="^{TAB}" />
				<item text="PrevView (C-S-Tab)" key="^+{TAB}" />
				<sep />
				<item text="Open... (C-O)" key="^o" />
				<item text="SaveAs... (C-S-S)" key="^+s" />
				<item text="New... (C-N)" key="^n" />
				<item text="Close (C-W)" key="^w" />
			</menu>
			<menu text="Pens, Tools" gst="L">
				<item text="Pen (&amp;N/l)" gst="l" key="n" />
				<item text="Eraser (&amp;E/r)" gst="r" key="e" />
				<item text="Mark (&amp;I*)" key="i" />
				<item text="Color (&amp;C)" key="c" />
				<item text="Spray (&amp;B)" key="b" />
				<item text="Paint (&amp;V)" key="v" />
				<item text="Blur (&amp;J*)" key="j" />
				<sep />
				<item text="Size+ (&amp;])" key="]" />
				<item text="Size- (&amp;[)" key="[" />
			</menu>
			<menu text="Trans, Edit" gst="D">
				<item text="Trans (C-T)" key="^t" />
				<item text="Accept (Enter)" key="{ENTER}" />
				<item text="Cancel (Escape)" key="{ESCAPE}" />
				<sep />
				<item text="Cut (C-X)" key="^x" />
				<item text="Copy (C-C)" key="^c" />
				<item text="Paste (C-V)" key="^v" />
			</menu>
			<sep />
			<item text="Cancel" />
		</menu>
	</script>
	<script for="hooker" event="OnHookEvent(msg, wParam, lParam)">
		if (msg == 0) {
			// pen events
			if (wParam == 0)
				// left button down
				;
			else if (wParam == 1)
				// right button down
				;
			else if (wParam == 2) setTimeout(function() {
				// pen reversed
				hooker.SetSaiStatus('keep-mousegesture', lParam ? '1' : '');
			}, 100)
			else if (wParam == 3)
				// pen eraser
				;
			else if (wParam == 4)
				// pen button
				simulateKey(VK.E, !!lParam);
		}
		else if (msg == 1) {
			// notify events (from RegisterNotify)
			var delta = lParam & 0x10000,
				index = lParam & 0xffff;
			if (wParam == 21)
				sendKeys(delta ? '{PGDN}' : '{PGUP}');
			else if (wParam == 22)
				sendKeys(delta ? '{DEL}' : '{END}');
			else if (wParam == 23 || wParam == 24) {
				hooker.UnRegisterNotify('th-z');
				hooker.UnRegisterNotify('th-r');
				hooker.UnRegisterNotify('ms-x');
				hooker.UnRegisterNotify('ms-y');
				hooker.SimulateDragWith(VK.SPACE, false, false, false);
			}
		}
		else
			logText('unknown message: ' + msg + ' (' + wParam.toString(16) + ', ' + lParam.toString(16) + ')');
	</script>
	<script for="hooker" event="OnMouseGesture(vec, x, y)">
		if (vec) {
			var doc = $('#popup').data('doc'),
				item = doc.find('[gst=' + vec + ']');
			if (item.is('menu')) {
				// popup the menu and wait for user selection
				var xml = '<menu>'+item.html()+'<sep /><item text="Cancel" /></menu>',
					cid = wndutil.PopupMenu(xml, -1, -1);
				item = item.find('[cid=' + cid + ']');
			}
			item.attr('key') ?
				sendKeys(item.attr('key')):
				logText('unknown gesture: ' + vec);
		}
		else {
			sendKeys('^z');
		}
	</script>
	<script for="hooker" event="OnTouchGesture(num, key, x, y)">
		if (key == 1) {
			// fingers are on the surface and starting to move
			if (num == 1) {
				// pan with one finger
				hooker.SimulateDragWith(VK.SPACE, false, false, false);
			}
			else if (num == 2) {
				// zoom/rotate with two fingers
				hooker.RegisterNotify('th-z', 21, createSteps(10, 0, 5));
				hooker.RegisterNotify('th-r', 22, createSteps(10, 0, 5));
				hooker.RegisterNotify('ms-x', 23, createSteps(80, 2));
				hooker.RegisterNotify('ms-y', 24, createSteps(80, 2));
			}
			else if (num == 3) {
				// move layer with three finger
				hooker.SimulateDragWith(0, true, false, false);
			}
		}
		else {
			// fingers tap
			if (num == 0) {
				// one-finger tap
				(window.fingerClicker0 || (window.fingerClicker0 = newClicker(function(count) {
					count && sendKeys('{HOME}');
				})))()
			}
			else if (num == 1) {
				// two-finger tap
				sendKeys('{TAB}');
			}
			else if (num == 2) {
				// three-finger tap
				sendKeys('{F11}');
			}
			else if (num == 3) {
				// four-finger tap
				simulateKey(VK.WIN, true);
				sendKeys('d');
				simulateKey(VK.WIN, 0);
			}
		}
	</script>
	<script>
		var VK = {
			SHIFT: 0x10,
			CTRL: 0x11,
			ALT: 0x12,
			SPACE: 0x20,
			WIN: 0x5b
		};
		for (var i = 0, s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'; i < s.length; i ++)
			VK[s.charAt(i)] = s.charCodeAt(i);

		function updateVisibility(name, value) {
			$(value ? '.show-'+name : '.hide-'+name).removeClass('hidden');
			$(value ? '.hide-'+name : '.show-'+name).addClass('hidden');
		}
		function logText(t, c, a) {
			$('#log').prepend('<div class="'+c+'">'+t+'</div>');
		}
		function loadImage(fi) {
			var path = $(fi).val();
			if (path) {
				$('#img').attr('src', path);
				logText('loading image: ' + path);
			}
			updateVisibility('image', path);
		}
		function toggleImageSize(im) {
			im = $(im);
			var ww = $(window).width();
			im.width() == ww ? im.width('auto') : im.width(ww);
		}
		function sendKeys(ks) {
			wndutil.ActiveSaiWindow();
			wscript.SendKeys(ks);
		}
		function simulateKey(vk, down) {
			wndutil.ActiveSaiWindow();
			hooker.SimulateKey(vk, down);
		}
		function createSteps(d, n, b) {
			var ls = [], b = b || 0;
			for (var i = 0; i < (n || 20); i++) {
				b += d;
				ls.push(b);
				ls.push(-b);
			}
			return ls.sort(function (a, b) {
				return a - b;
			}).join(',');
		}
		function browseFile(fi) {
			return $(fi).trigger('click').val();
		}
		function runFile(fi) {
			var path = $(fi).val();
			if (path)
				wscript.Run(path);
		}
		function newClicker(callback) {
			var tid = 0,
				count = 0;
			return function () {
				if (tid > 0) {
					count ++;
					clearTimeout(tid);
				}
				tid = setTimeout(function() {
					callback(count);
					tid = 0;
					count = 0;
				}, 200);
			}
		}

		window.hooker = document.getElementById('hooker');
		window.wndutil = document.getElementById('wndutil');
		window.wscript = new ActiveXObject("WScript.Shell");

		window.ontimer = function () {
			var err = hooker.Hook();
			$('.err').text(err == 1444 ? 'Is Sai Running?' : err);
			updateVisibility('error', err);
		}
		window.onload = function () {
			wndutil.SetupToolWindow(document.title);

			$('input[type=checkbox].auto-load').each(function(i, e) {
				var v = $(e).attr('initvalue');
				if (v) e.checked = eval(v);
			});
			$('select.auto-load').each(function(i, e) {
				var c = $(e).children('option'),
					v = $(e).attr('initvalue'),
					p = c.filter('[value="'+(v ? eval(v) : '')+'"]');
				(p[0] || c[0]).selected = true;
			});
			$('script[for=menu]').each(function (i, e) {
				var elem = $(e), doc = $(elem.html());
				doc.find('item').each(function(i, e) { $(e).attr('cid', i+1); })
				elem.data('doc', doc).data('xml', doc[0].outerHTML);
			});
			$('label[for="prev-input"]').each(function(i, e) {
				var elem = $(e), prev = elem.prev();
				if (!prev.attr('id'))
					prev.attr('id', Date.now()+Math.random());
				elem.attr('for', prev.attr('id'));
			});

			window.resizeTo(320, 360);
			window.ontimer();
			setInterval(window.ontimer, 2000);
		}
		window.onbeforeunload = function () {
			hooker.UnHook();
		}
	</script>
</body>
</html>
