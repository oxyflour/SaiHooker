<!DOCTYPE html>

<html lang="en" xmlns="http://www.w3.org/1999/xhtml">
<head>
	<meta http-equiv="X-UA-Compatible" content="IE=IE10" />
	<meta charset="utf-8" />
	<title>SAI HOOKER TEST</title>
	<script src="jquery-1.8.0.min.js"></script>
	<style>
		body { margin: 0; padding: 0; }
		.hidden { display: none; }
		.big { font-size: 120%; }
		.tab { display: inline-block; margin: 5px; }
		.tab.active { font-weight: bold; }
		.tab-content { margin: 5px; display: none; }
		.tab-content.active { display: block; }
		.tab-content button { padding:7px; margin:3px; }
		span.field { margin: 5px; font-size: 110%; }
	</style>
	<!-- HTA tag does not work in IE10 -->
	<HTA:Application
		id="Sai_Hooker_33895"
		applicationname="Sai Hooker"
		icon="sai.ico"
		innerborder="no"
		scroll="yes"
		selection="no"
		maximizebutton="no"
		contextmenu="no"
		sysmenu="yes"
		singleinstance="yes" />
</head>
<body>
	<object id="hooker" width="0" height="0" classid="clsid:8E1D1128-0685-4C1D-8475-916B2BDE241A"></object>
	<object id="wndutil" width="0" height="0" classid="clsid:4661BF20-A332-4ADA-9F20-1D6EAB5DADA3"></object>
    <div class="hidden">
        <label class="tab active" for="rad0">UI</label>
        <label class="tab" for="rad1">Pens</label>
        <label class="tab" for="rad2">Trans</label>
        <label class="tab" for="rad4">Select</label>
        <label class="tab" for="rad3">More</label>
        <div for="rad0" class="tab-content active">
            <button onclick="sendKeys('{TAB}')">Tab</button>
            <button onclick="sendKeys('{F11}')">F11</button>
            <button onclick="sendKeys('h')">Flip</button>
            <button onclick="sendKeys('^{TAB}')">View</button>
        </div>
        <div for="rad1" class="tab-content">
            <button onclick="sendKeys('n')">[N]</button>
            <button onclick="sendKeys('c')">[C]</button>
            <button onclick="sendKeys('e')">[E]</button>
            <button onclick="sendKeys('s')">[S]</button>
            <button onclick="sendKeys('a')">[A]</button>
        </div>
        <div for="rad2" class="tab-content">
            <button onclick="sendKeys('^t')">Trans</button>
            <button onclick="sendKeys('{ENTER}')">Accept</button>
            <button onclick="sendKeys('{ESCAPE}')">Cancel</button>
        </div>
        <div for="rad3" class="tab-content">
            Key: 
            <span class="field">
                <input type="checkbox" value="16" onchange="hooker.SimulateKey(this.value, this.checked)" />Shift
            </span>
            <span class="field">
                <input type="checkbox" value="17" onchange="hooker.SimulateKey(this.value, this.checked)" />Ctrl
            </span>
            <span class="field">
                <input type="checkbox" value="18" onchange="hooker.SimulateKey(this.value, this.checked)" />Alt
            </span>
            <br />
            <br />
            <span class="field">
                <input class="auto-load" type="checkbox"
                    initvalue="hooker.DisableTouch(-1)"
                    onchange="hooker.DisableTouch(this.checked ? 1 : 0)" />Lock All touches
            </span>
            <br />
            <br />
            <span class="field">
                Pan+<select class="auto-load big"
                    initvalue="hooker.SetPanningKey(-1)"
                    onchange="hooker.SetPanningKey(parseInt(this.value))">
                    <option value="0">None</option>
                    <option value="32">Space</option>
                    <option value="16">Shift</option>
                    <option value="17">Ctrl</option>
                    <option value="18">Alt</option>
                </select>
            </span>
            <!--button onclick="wndutil.PopupMenu($('#popup').data('xml'), 200, 500)">Menu</!--button-->
        </div>
        <div for="rad4" class="tab-content">
            <button onclick="sendKeys('^a')">All</button>
            <button onclick="$('.tab:first').trigger('click');sendKeys('^d')">None</button>
            <button onclick="sendKeys('^f')">Fill</button>
            <button onclick="sendKeys('d')">Clr</button>
            <!--button onclick="sendKeys('^c')">Copy</button>
            <button onclick="sendKeys('^v')">Paste</button-->
            <!--button onclick="sendKeys('{LEFT}')">&lt;</button>
            <button onclick="sendKeys('{UP}')">&and;</button>
            <button onclick="sendKeys('{DOWN}')">&or;</button>
            <button onclick="sendKeys('{RIGHT}')">&gt;</button-->
        </div>
    </div>
	<div id="log"></div>
	<script id="popup" type="text/xml">
		<menu>
			<item text="Pen (&amp;N/l)" gst="l" key="n" />
			<item text="Eraser (&amp;E/r)" gst="r" key="e" />
			<item text="Move (&amp;M/d)" gst="d" key="m" />
			<item text="Straw (&amp;L/D)" gst="D" key="l" />
			<sep />
			<item text="Redu (&amp;R/du)" gst="du" key="^y" />
			<item text="Clear (&amp;D/dL)" gst="dL" key="d" />
			<item text="Flip (&amp;H/dl)" gst="dl" key="h" />
			<item text="Fill (C-F/dU)" gst="dU" key="^f" />
			<item text="Filter (&amp;O)" key="o" />
			<sep />
			<menu text="Select">
				<item text="SelNone (C-D/u)" gst="u" key="^d" />
				<item text="SelRect (&amp;Q/ul)" gst="ul" key="q" />
				<item text="SelFree (&amp;U/ur)" gst="ur" key="u" />
				<item text="SelPen (&amp;A/uD)" gst="uD" key="a" />
				<item text="SelEraser (&amp;S/uR)" gst="uR" key="s" />
				<item text="SelRegion (&amp;F/ud)" gst="ud" key="f" />
			</menu>
			<menu text="UI, File">
				<item text="TAB (Tab/U)" gst="U" key="{TAB}" />
				<item text="Fullscreen (F11/UD)" gst="UD" key="{F11}" />
				<item text="NextView (C-Tab/Ul)" key="^{TAB}" />
				<item text="PrevView (C-S-Tab/Ud)" key="^+{TAB}" />
				<sep />
				<item text="Open... (C-O/rl)" key="^o" />
				<item text="SaveAs... (C-S-S/rd)" key="^+s" />
				<item text="New... (C-N/rL)" key="^n" />
				<item text="Close (C-W/rD)" key="^w" />
			</menu>
			<menu text="Trans, Edit">
				<item text="Trans (C-T/RL)" key="^t" />
				<item text="Accept (Enter/Ru)" key="{ENTER}" />
				<item text="Cancel (Escape/Rl)" key="{ESCAPE}" />
				<sep />
				<item text="Cut (C-X/Lr)" key="^x" />
				<item text="Copy (C-C/Ld)" key="^c" />
				<item text="Past (C-V/LR)" key="^v" />
			</menu>
			<menu text="Pens, Mix">
				<item text="Mark (&amp;I/lr)" gst="lr" key="i" />
				<item text="Color (&amp;C/lu)" gst="lu" key="c" />
				<item text="Spray (&amp;B/ld)" gst="ld" key="b" />
				<item text="Pain (&amp;V/lU)" gst="lU" key="v" />
				<item text="Blur (&amp;J/lR)" gst="lR" key="j" />
				<sep />
				<item text="Size+ (&amp;]/L)" gst="L" key="]" />
				<item text="Size- (&amp;[/R)" gst="R" key="[" />
			</menu>
			<sep />
			<item text="Cancel" />
		</menu>
	</script>
	<script>
		function sendKeys(k) {
			wndutil.ActiveSaiWindow();
			wscript.SendKeys(k);
		}
		function logText(t, c, a) {
			$('#log').prepend('<div class="'+c+'">'+t+'</div>');
		}

		window.hooker = document.getElementById('hooker');
		window.wndutil = document.getElementById('wndutil');
		window.wscript = new ActiveXObject("WScript.Shell");

		hooker.attachEvent("OnHookEvent", function (msg, wParam, lParam) {
		    if (msg == 1) {
		        if (wParam & 2)
		            wscript.SendKeys(wParam & 1 ? '{PGUP}' : '{PGDN}');
                else
		            wscript.SendKeys(wParam & 1 ? '{DEL}' : '{END}');
		    }
		    else if (msg == 2) {
		        if (wParam & 2)
		            wscript.SendKeys(wParam & 1 ? '{]}' : '{[}');
		        else {
		            var k = {
		                32: 'n',
		                33: 'b',
		                34: 'v',
                        35: 'c',
                        36: 'e',
                        37: 'a',
                        38: 's'
		            }[lParam];
		            k && wscript.SendKeys(k);
		        }
		    }
		    else // debug only
		        logText('debug: ' + msg + ' (' + wParam + ', ' + lParam + ')');
		});
		hooker.attachEvent("OnMouseGesture", function (vec, key, x, y) {
            // left mouse button is down
		    if (key == 1) {
		        ({
		            '': function () {
		                hooker.SimulateDragWith(0x20, false, false, false);
                        /*
                        hooker.SimulateKey(18, true);
                        hooker.SimulateMouse(0, 0, true);
                        hooker.SimulateMouse(0, 0, 0);
                        hooker.SimulateKey(18, 0);
                        */
		            },
                    u: function () {
		                hooker.SimulateDragStep(1, 15, 20);
		            },
                    l: function () {
		                hooker.SimulateDragStep(2, 30, 20);
		            }
		        }[vec] || function () {
		            logText('unknown stroke: ' + vec);
		        })();
		    }
            // no button down
		    else {
		        if (vec) {
		            var item = $('#popup').data('doc').find('[gst=' + vec + ']');
		            item.attr('key') ? wscript.SendKeys(item.attr('key')) :
                        logText('unknown gesture: ' + vec);
		        }
		        else {
    		        wscript.SendKeys('^z');
		        }
		    }
		});
		hooker.attachEvent("OnFingerTap", function (n, x, y) {
			// one finger tap
			if (n == 0) {
				var tapTick = Date.now();
				// double tap detection
				if (tapTick - window.tapTick < 200) {
                    // ALT + Click
					hooker.SimulateKey(18, true);
					hooker.SimulateMouse(x, y, true);
					hooker.SimulateMouse(x, y, 0);
					hooker.SimulateKey(18, 0);
				}
				window.tapTick = tapTick;
			}
			// two finger tap
			else if (n == 1) {
				var pop = $('#popup'),
					id = wndutil.PopupMenu(pop.data('xml'), x, y),
					item = pop.data('doc').find('[cid='+id+']');
				wndutil.ActiveSaiWindow();
				item.attr('key') && wscript.SendKeys(item.attr('key'));
			}
			// three finger tap
			else if (n == 2) {
				wscript.SendKeys('{F11}');
			}
			// four finger tap
			else if (n == 3) {
                // send WIN+D event
				hooker.SimulateKey(0x5b, true);
				wscript.SendKeys('d');
				hooker.SimulateKey(0x5b, 0);
			}
		});
		window.onload = function () {
			wndutil.SetupToolWindow(document.title);
			$('input[type=checkbox].auto-load').each(function(i, e) {
				var v = $(e).attr('initvalue');
				if (v) e.checked = eval(v);
			});
			$('select.auto-load').each(function(i, e) {
				var c = $(e).children('option'),
					v = $(e).attr('initvalue'),
					p = c.filter('[value="'+(v ? eval(v) : '')+'"]');
				(p[0] || c[0]).selected = true;
			});

			$('label.tab').click(function(e) {
				$(this).addClass('active').siblings('.tab').removeClass('active');
				$('.tab-content[for="'+$(this).attr('for')+'"]').addClass('active')
					.siblings('.tab-content').removeClass('active');
			});

			// prepare xml text for PopupMenu
			var pop = $('#popup'), doc = $(pop.html());
			doc.find('item').each(function(i, e) { $(e).attr('cid', i+1); })
			pop.data('doc', doc).data('xml', doc[0].outerHTML);
		}
		window.onbeforeunload = function () {
			hooker.UnHook();
		}
		window.ontimer = function () {
			var errno = hooker.Hook();
			document.title = 'Sai Hooker: ' +
				(errno ? 'Hook Failed (' + errno + ')' : 'Hook ok');
		}

		window.resizeTo(300, 320);
		window.ontimer();
		setInterval(window.ontimer, 2000)
	</script>
</body>
</html>
